#!/usr/bin/env node

// Script para debug espec√≠fico do problema de checkout links
console.log('üîç [DEBUG] Iniciando diagn√≥stico do problema de checkout links...\n');

// Verifica√ß√µes a serem feitas
const checks = [
  '1. Verificar se edge function create-vindi-customer est√° sendo chamada',
  '2. Verificar se a fun√ß√£o est√° retornando dados corretos',
  '3. Verificar se o campo checkout_link est√° sendo salvo no banco',
  '4. Verificar se a tabela est√° lendo o campo corretamente',
  '5. Verificar se real-time est√° funcionando'
];

console.log('üìã [DEBUG] Verifica√ß√µes necess√°rias:');
checks.forEach(check => console.log(`   ${check}`));

console.log('\nüéØ [DEBUG] Passos para identificar o problema:');

console.log('\n   PASSO 1 - Verificar logs no console do navegador:');
console.log('   ‚Ä¢ Abra http://localhost:8081');
console.log('   ‚Ä¢ Abra DevTools (F12)');
console.log('   ‚Ä¢ V√° para a aba Console');
console.log('   ‚Ä¢ Crie um novo benefici√°rio');
console.log('   ‚Ä¢ Procure por logs que come√ßam com [MATRIZ-ADESAO] ou [UNIDADE-ADESAO]');

console.log('\n   PASSO 2 - Se n√£o h√° logs no console:');
console.log('   ‚Ä¢ O modal n√£o est√° sendo executado corretamente');
console.log('   ‚Ä¢ Verificar se o usu√°rio est√° logado');
console.log('   ‚Ä¢ Verificar se h√° erros JavaScript na p√°gina');

console.log('\n   PASSO 3 - Se h√° logs mas sem sucesso:');
console.log('   ‚Ä¢ Verificar se aparece erro na chamada create-vindi-customer');
console.log('   ‚Ä¢ Verificar se VINDI_PRIVATE_KEY est√° configurada');
console.log('   ‚Ä¢ Verificar se o benefici√°rio tem plano v√°lido');

console.log('\n   PASSO 4 - Se fun√ß√£o retorna sucesso mas sem checkout_url:');
console.log('   ‚Ä¢ Problema na edge function create-vindi-customer');
console.log('   ‚Ä¢ Verificar logs da edge function no Supabase Dashboard');

console.log('\n   PASSO 5 - Se h√° checkout_url mas campo n√£o √© salvo:');
console.log('   ‚Ä¢ Problema no update do banco de dados');
console.log('   ‚Ä¢ Verificar permiss√µes de RLS no Supabase');
console.log('   ‚Ä¢ Verificar se user_id est√° correto');

console.log('\n   PASSO 6 - Se campo √© salvo mas n√£o aparece na tabela:');
console.log('   ‚Ä¢ Problema na query da tabela ou real-time');
console.log('   ‚Ä¢ Recarregar a p√°gina manualmente');
console.log('   ‚Ä¢ Verificar se query inclui campo checkout_link');

console.log('\nüîß [DEBUG] Ferramentas para investiga√ß√£o:');
console.log('   ‚Ä¢ Console do navegador (F12)');
console.log('   ‚Ä¢ Supabase Dashboard > Edge Functions > Logs');
console.log('   ‚Ä¢ Supabase Dashboard > Table Editor > beneficiarios');
console.log('   ‚Ä¢ Network tab para ver requests HTTP');

console.log('\nüìù [DEBUG] Que logs voc√™ est√° vendo no console?');
console.log('   Por favor, compartilhe os logs espec√≠ficos que aparecem');
console.log('   quando voc√™ tenta criar um benefici√°rio.');

console.log('\nüé≤ [DEBUG] Teste alternativo:');
console.log('   1. V√° para Supabase Dashboard');
console.log('   2. Table Editor > beneficiarios');
console.log('   3. Veja se existem registros com checkout_link preenchido');
console.log('   4. Se sim, o problema √© na exibi√ß√£o da tabela');
console.log('   5. Se n√£o, o problema √© na cria√ß√£o do link');

console.log('\n‚úÖ [DEBUG] Pr√≥ximos passos ap√≥s identificar onde falha:');
console.log('   ‚Ä¢ Envie os logs espec√≠ficos do console');
console.log('   ‚Ä¢ Informe em qual passo exato o processo falha');
console.log('   ‚Ä¢ Poderei ent√£o fazer o fix direcionado');