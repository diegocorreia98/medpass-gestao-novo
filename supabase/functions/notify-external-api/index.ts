import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.51.0'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type'
};

// Validar vari√°veis de ambiente b√°sicas na inicializa√ß√£o
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
const idClienteContrato = Deno.env.get('ID_CLIENTE_CONTRATO');
const idCliente = Deno.env.get('ID_CLIENTE');
const vindiApiKey = Deno.env.get('VINDI_API_KEY');

console.log('=== INICIALIZA√á√ÉO DA EDGE FUNCTION ===');
console.log('SUPABASE_URL configurado:', !!supabaseUrl);
console.log('SUPABASE_SERVICE_ROLE_KEY configurado:', !!supabaseServiceKey);
console.log('ID_CLIENTE_CONTRATO configurado:', !!idClienteContrato, idClienteContrato);
console.log('ID_CLIENTE configurado:', !!idCliente, idCliente);
console.log('VINDI_API_KEY configurado:', !!vindiApiKey);

// Verificar vari√°veis b√°sicas obrigat√≥rias
const missingVars = [];
if (!supabaseUrl) missingVars.push('SUPABASE_URL');
if (!supabaseServiceKey) missingVars.push('SUPABASE_SERVICE_ROLE_KEY');
if (!idClienteContrato) missingVars.push('ID_CLIENTE_CONTRATO');
if (!idCliente) missingVars.push('ID_CLIENTE');

if (missingVars.length > 0) {
  console.error('ERRO: Vari√°veis de ambiente b√°sicas faltando:', missingVars);
  throw new Error(`Vari√°veis de ambiente b√°sicas n√£o configuradas: ${missingVars.join(', ')}`);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Fun√ß√£o para buscar configura√ß√µes da API na base de dados
async function getApiSettings() {
  console.log('=== BUSCANDO CONFIGURA√á√ïES DA API ===');

  const { data: settings, error } = await supabase
    .from('api_settings')
    .select('setting_name, setting_value')
    .in('setting_name', [
      'EXTERNAL_API_KEY',
      'EXTERNAL_API_ADESAO_URL',
      'EXTERNAL_API_CANCELAMENTO_URL'
    ]);

  if (error) {
    console.error('Erro ao buscar configura√ß√µes da API:', error);
    throw new Error('N√£o foi poss√≠vel buscar as configura√ß√µes da API');
  }

  if (!settings || settings.length === 0) {
    throw new Error('Nenhuma configura√ß√£o encontrada. Configure a API key e URLs nas Configura√ß√µes.');
  }

  const settingsMap = {};
  settings.forEach(setting => {
    settingsMap[setting.setting_name] = setting.setting_value;
  });

  console.log('Configura√ß√µes encontradas:', Object.keys(settingsMap));

  const requiredSettings = ['EXTERNAL_API_KEY', 'EXTERNAL_API_ADESAO_URL', 'EXTERNAL_API_CANCELAMENTO_URL'];
  const missingSettings = requiredSettings.filter(key => !settingsMap[key]);

  if (missingSettings.length > 0) {
    throw new Error(`Configura√ß√µes faltando: ${missingSettings.join(', ')}. Configure nas Configura√ß√µes.`);
  }

  return {
    externalApiKey: settingsMap['EXTERNAL_API_KEY'],
    externalApiAdesaoUrl: settingsMap['EXTERNAL_API_ADESAO_URL'],
    externalApiCancelamentoUrl: settingsMap['EXTERNAL_API_CANCELAMENTO_URL']
  };
}

async function logApiCall(beneficiarioId, operation, requestData, responseData = null, status = 'success', errorMessage = null, retryCount = 0) {
  try {
    await supabase.from('api_integrations_log').insert({
      beneficiario_id: beneficiarioId,
      operation,
      request_data: requestData,
      response_data: responseData,
      status,
      error_message: errorMessage,
      retry_count: retryCount
    });
  } catch (error) {
    console.error('Erro ao salvar log:', error);
  }
}

function validateApiResponse(operation, responseData) {
  if (!responseData) {
    return { isValid: false, errorMessage: 'Resposta vazia da API externa' };
  }

  // Valida√ß√µes espec√≠ficas por opera√ß√£o
  switch (operation) {
    case 'adesao':
    case 'test-adesao':
      // Verifica se cont√©m mensagem de sucesso para ades√£o
      if (responseData.mensagem && typeof responseData.mensagem === 'string') {
        const mensagem = responseData.mensagem.toLowerCase();
        if (mensagem.includes('cadastrado com sucesso') || mensagem.includes('sucesso')) {
          return { isValid: true };
        }
      }
      return { isValid: false, errorMessage: 'Resposta da API n√£o cont√©m mensagem de sucesso esperada para ades√£o' };

    case 'cancelamento':
    case 'test-cancelamento':
      // Melhorar valida√ß√£o para cancelamento - aceitar diferentes tipos de resposta
      if (responseData.mensagem && typeof responseData.mensagem === 'string') {
        const mensagem = responseData.mensagem.toLowerCase();
        if (mensagem.includes('cancelado com sucesso') || mensagem.includes('cancelamento realizado') || mensagem.includes('sucesso')) {
          return { isValid: true };
        }
        // Verificar se √© erro de neg√≥cio (CPF n√£o encontrado) vs erro t√©cnico
        if (mensagem.includes('n√£o localizado') || mensagem.includes('1063')) {
          return { isValid: false, errorMessage: `Erro de neg√≥cio: ${responseData.mensagem}` };
        }
      }
      // Se tem c√≥digo de erro espec√≠fico, tratar como erro de neg√≥cio
      if (responseData.codigo && responseData.codigo === 1063) {
        return { isValid: false, errorMessage: `Benefici√°rio n√£o encontrado na API externa (c√≥digo ${responseData.codigo})` };
      }
      return { isValid: false, errorMessage: 'Resposta da API n√£o cont√©m mensagem de sucesso esperada para cancelamento' };

    case 'test':
      // Para teste simples, aceita qualquer resposta v√°lida
      return { isValid: true };

    default:
      return { isValid: true };
  }
}

function getApiUrl(operation, apiSettings) {
  switch (operation) {
    case 'adesao':
    case 'test-adesao':
      return apiSettings.externalApiAdesaoUrl;
    case 'cancelamento':
    case 'test-cancelamento':
      return apiSettings.externalApiCancelamentoUrl;
    case 'test-credentials':
      // Para teste de credenciais, usamos o endpoint de ades√£o
      return apiSettings.externalApiAdesaoUrl;
    default:
      throw new Error(`Opera√ß√£o n√£o suportada: ${operation}`);
  }
}

async function makeApiCall(data, operation, apiSettings, retryCount = 0) {
  const maxRetries = 3;
  const backoffDelay = Math.pow(2, retryCount) * 1000; // Exponential backoff
  const apiUrl = getApiUrl(operation, apiSettings);

  try {
    console.log(`=== TENTATIVA ${retryCount + 1} - OPERA√á√ÉO: ${operation} ===`);
    console.log('URL:', apiUrl);
    console.log('Headers enviados:', {
      'Content-Type': 'application/json',
      'x-api-key': apiSettings.externalApiKey ? `${apiSettings.externalApiKey.substring(0, 8)}...` : 'N√ÉO CONFIGURADA'
    });
    console.log('Dados enviados:', JSON.stringify(data, null, 2));

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiSettings.externalApiKey
      },
      body: JSON.stringify(data)
    });

    const responseData = await response.json();
    console.log(`Status da resposta: ${response.status}`);
    console.log('Resposta da API externa:', JSON.stringify(responseData, null, 2));

    // Valida√ß√£o do status HTTP
    if (!response.ok) {
      const errorMessage = `API retornou status ${response.status}: ${JSON.stringify(responseData)}`;

      // N√£o fazer retry para erros de autentica√ß√£o (401) ou autoriza√ß√£o (403)
      if (response.status === 401 || response.status === 403) {
        console.error('ERRO DE CREDENCIAL - N√ÉO SER√Å FEITA NOVA TENTATIVA:', errorMessage);
        throw new Error(errorMessage);
      }

      throw new Error(errorMessage);
    }

    return responseData;
  } catch (error) {
    console.error(`Erro na tentativa ${retryCount + 1}:`, error);

    // Verificar se √© erro de credencial (n√£o fazer retry)
    const isCredentialError = error.message.includes('status 401') || error.message.includes('status 403');

    if (retryCount < maxRetries - 1 && !isCredentialError) {
      console.log(`Aguardando ${backoffDelay}ms antes da pr√≥xima tentativa...`);
      await new Promise(resolve => setTimeout(resolve, backoffDelay));
      return makeApiCall(data, operation, apiSettings, retryCount + 1);
    }

    if (isCredentialError) {
      console.error('FALHA DE AUTENTICA√á√ÉO - Verifique a EXTERNAL_API_KEY nas configura√ß√µes do Supabase');
    }

    throw error;
  }
}

// Fun√ß√£o para validar CPF
function isValidCPF(cpf) {
  // Remove caracteres n√£o num√©ricos
  const cleanCPF = cpf.replace(/\D/g, '');

  // Verifica se tem 11 d√≠gitos
  if (cleanCPF.length !== 11) return false;

  // Verifica se todos os d√≠gitos s√£o iguais (CPF inv√°lido)
  if (/^(\d)\1{10}$/.test(cleanCPF)) return false;

  // Valida√ß√£o do primeiro d√≠gito verificador
  let sum = 0;
  for (let i = 0; i < 9; i++) {
    sum += parseInt(cleanCPF[i]) * (10 - i);
  }
  let digit1 = (sum * 10) % 11;
  if (digit1 === 10) digit1 = 0;
  if (digit1 !== parseInt(cleanCPF[9])) return false;

  // Valida√ß√£o do segundo d√≠gito verificador
  sum = 0;
  for (let i = 0; i < 10; i++) {
    sum += parseInt(cleanCPF[i]) * (11 - i);
  }
  let digit2 = (sum * 10) % 11;
  if (digit2 === 10) digit2 = 0;
  if (digit2 !== parseInt(cleanCPF[10])) return false;

  return true;
}

// Fun√ß√£o para formatar CPF para a Vindi (apenas n√∫meros)
function formatCPFForVindi(cpf) {
  // Remove todos os caracteres n√£o num√©ricos
  const cleanCPF = cpf.replace(/\D/g, '');

  // Valida o CPF
  if (!isValidCPF(cleanCPF)) {
    throw new Error(`CPF inv√°lido: ${cpf}. Por favor, use um CPF v√°lido para teste.`);
  }

  return cleanCPF;
}

async function mapPlanoToTipoPlano(planoId) {
  console.log(`üîç Mapeando plano ${planoId} para tipoPlano da RMS...`);

  try {
    // Buscar o plano no banco de dados para obter o rms_plan_code
    const { data: plano, error } = await supabase
      .from('planos')
      .select('rms_plan_code, nome')
      .eq('id', planoId)
      .single();

    if (error) {
      console.warn(`‚ö†Ô∏è Erro ao buscar plano ${planoId}:`, error.message);
    } else if (plano) {
      console.log(`üìã Plano encontrado: ${plano.nome}, RMS code: ${plano.rms_plan_code}`);

      // Se tem c√≥digo RMS configurado, usar ele
      if (plano.rms_plan_code) {
        const rmsCode = parseInt(plano.rms_plan_code);
        if (!isNaN(rmsCode)) {
          console.log(`‚úÖ Usando c√≥digo RMS configurado: ${rmsCode}`);
          return rmsCode;
        } else {
          console.warn(`‚ö†Ô∏è C√≥digo RMS inv√°lido (n√£o √© n√∫mero): ${plano.rms_plan_code}`);
        }
      } else {
        console.log(`‚ÑπÔ∏è Plano ${plano.nome} n√£o tem c√≥digo RMS configurado, usando fallback`);
      }
    }
  } catch (error) {
    console.error(`‚ùå Erro ao consultar plano ${planoId}:`, error);
  }

  // Fallback para mapeamento hardcoded existente
  console.log(`üîÑ Usando mapeamento hardcoded para plano ${planoId}`);
  const planoMapping = {
    'f3395d2c-7e18-41e6-8204-1d71c1981d3c': 102304, // Familiar
    '1af1a9e8-5590-4349-84cc-be5f8f7f9d83': 102303, // Individual
    '8f22a8dc-62f6-5145-b57d-fcec8c6780de': 102304, // Familiar
    '4e11e7cb-51f5-4034-a46c-ebdb7b5679cd': 102303  // Individual
  };

  const tipoPlano = planoMapping[planoId] || 102303; // Default para Individual
  console.log(`üìä TipoPlano final: ${tipoPlano}`);
  return tipoPlano;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { operation, data } = await req.json();
    console.log(`üöÄ Opera√ß√£o recebida: ${operation}`);
    console.log('üìã Dados:', JSON.stringify(data, null, 2));

    // Buscar configura√ß√µes da API para opera√ß√µes que precisam delas
    let apiSettings = null;
    if (operation !== 'test') {
      try {
        apiSettings = await getApiSettings();
      } catch (error) {
        console.error('‚ùå Erro ao buscar configura√ß√µes:', error.message);
        return new Response(JSON.stringify({
          success: false,
          error: error.message,
          needsConfiguration: true
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 400
        });
      }
    }

    // Handle test operation
    if (operation === 'test') {
      const testResponse = {
        status: 'success',
        message: 'Teste de conectividade realizado com sucesso',
        timestamp: new Date().toISOString()
      };

      await logApiCall(null, 'test', data, testResponse, 'success', null, 0);

      return new Response(JSON.stringify(testResponse), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      });
    }

    // Handle adesao operation with enhanced error handling
    if (operation === 'adesao') {
      console.log('üè• === PROCESSANDO ADES√ÉO ===');

      try {
        const {
          id: beneficiarioId,
          nome,
          cpf,
          data_nascimento,
          telefone,
          email,
          cep,
          numero_endereco,
          estado,
          plano_id,
          id_beneficiario_tipo,
          codigo_externo,
          cpf_titular // CPF do titular (obrigat√≥rio para dependentes)
        } = data;

        // ETAPA 1: Valida√ß√µes defensivas com logging detalhado
        console.log('üîç === VALIDANDO DADOS DE ADES√ÉO ===');
        console.log('üìã Dados recebidos:', JSON.stringify(data, null, 2));
        console.log('üÜî beneficiarioId:', beneficiarioId);
        console.log('üë§ id_beneficiario_tipo:', id_beneficiario_tipo);
        console.log('üè∑Ô∏è Tipo de benefici√°rio:', id_beneficiario_tipo === 3 ? 'DEPENDENTE' : 'TITULAR');

        const missingFields = [];
        if (!nome) missingFields.push('nome');
        if (!cpf) missingFields.push('cpf');
        if (!email) missingFields.push('email');
        if (!codigo_externo) missingFields.push('codigo_externo');

        if (missingFields.length > 0) {
          const errorMsg = `Campos obrigat√≥rios faltando: ${missingFields.join(', ')}`;
          console.error('‚ùå ERRO DE VALIDA√á√ÉO:', errorMsg);
          throw new Error(errorMsg);
        }

        // Valida√ß√£o espec√≠fica para dependentes
        if (id_beneficiario_tipo === 3 && !cpf_titular) {
          const errorMsg = 'CPF do titular √© obrigat√≥rio para dependentes (id_beneficiario_tipo = 3)';
          console.error('‚ùå ERRO DE DEPENDENTE:', errorMsg);
          throw new Error(errorMsg);
        }

        // Valida√ß√£o do plano_id
        if (!plano_id) {
          const errorMsg = 'plano_id √© obrigat√≥rio para processar ades√£o';
          console.error('‚ùå ERRO DE PLANO:', errorMsg);
          throw new Error(errorMsg);
        }

        console.log('‚úÖ Valida√ß√µes b√°sicas aprovadas');

        // ETAPA 2: Mapear plano para tipo RMS
        console.log('üó∫Ô∏è === MAPEANDO PLANO ===');
        let tipoPlano;
        try {
          tipoPlano = await mapPlanoToTipoPlano(plano_id);
          console.log(`‚úÖ TipoPlano obtido: ${tipoPlano} para plano_id: ${plano_id}`);
        } catch (error) {
          const errorMsg = `Erro ao mapear plano ${plano_id}: ${error.message}`;
          console.error(`‚ùå ERRO DE MAPEAMENTO:`, errorMsg);
          throw new Error(errorMsg);
        }

        // ETAPA 3: Preparar dados para RMS
        console.log('üîß === PREPARANDO DADOS PARA RMS ===');
        const requestData = {
          idClienteContrato: parseInt(idClienteContrato),
          idBeneficiarioTipo: id_beneficiario_tipo || 1,
          nome: nome.trim(),
          codigoExterno: codigo_externo.trim(),
          idCliente: parseInt(idCliente),
          cpf: cpf.replace(/\D/g, ''), // Remove formata√ß√£o
          dataNascimento: data_nascimento || '01011990',
          celular: telefone ? telefone.replace(/\D/g, '') : '11999999999',
          email: email.trim(),
          cep: cep || '01234567',
          numero: numero_endereco || '123',
          uf: estado || 'SP',
          tipoPlano: tipoPlano
        };

        // Adicionar CPF do titular se for dependente
        if (id_beneficiario_tipo === 3 && cpf_titular) {
          requestData.cpfTitular = cpf_titular.replace(/\D/g, '');
          console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ CPF do titular adicionado para dependente:', requestData.cpfTitular);
        }

        console.log('üì§ === DADOS PREPARADOS PARA RMS ===');
        console.log('üìã requestData:', JSON.stringify(requestData, null, 2));

        // ETAPA 4: Fazer chamada para API RMS
        console.log('üåê === ENVIANDO PARA API RMS ===');
        const response = await makeApiCall(requestData, 'adesao', apiSettings);

        // ETAPA 5: Validar resposta
        console.log('‚úÖ === VALIDANDO RESPOSTA RMS ===');
        const validation = validateApiResponse('adesao', response);
        if (!validation.isValid) {
          console.warn('‚ö†Ô∏è Valida√ß√£o falhou:', validation.errorMessage);
          await logApiCall(beneficiarioId, 'adesao', requestData, response, 'error', validation.errorMessage);

          return new Response(JSON.stringify({
            success: false,
            error: validation.errorMessage,
            response,
            stage: 'validation'
          }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          });
        }

        // ETAPA 6: Log de sucesso
        await logApiCall(beneficiarioId, 'adesao', requestData, response, 'success');
        console.log('üéâ === ADES√ÉO PROCESSADA COM SUCESSO ===');

        return new Response(JSON.stringify({
          success: true,
          response,
          stage: 'completed'
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });

      } catch (adesaoError) {
        console.error('‚ùå === ERRO NO PROCESSAMENTO DA ADES√ÉO ===');
        console.error('üî• Erro:', adesaoError.message);
        console.error('üìä Stack:', adesaoError.stack);

        // Log do erro
        await logApiCall(
          data?.id || null,
          'adesao',
          data,
          null,
          'error',
          adesaoError.message
        );

        return new Response(JSON.stringify({
          success: false,
          error: adesaoError.message,
          stage: 'processing',
          details: adesaoError.stack
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 500
        });
      }
    }

    // Handle cancelamento operation
    if (operation === 'cancelamento') {
      console.log('üö´ === PROCESSANDO CANCELAMENTO ===');

      const { cpf, codigoExterno } = data;

      // Seguir exatamente a especifica√ß√£o da RMS API Cancelamento V4.0
      const requestData = {
        idClienteContrato: parseInt(idClienteContrato),
        idCliente: parseInt(idCliente),
        cpf: cpf,
        codigoExterno: codigoExterno || ""
      };

      console.log('üì§ Payload de cancelamento:', JSON.stringify(requestData, null, 2));

      try {
        const response = await makeApiCall(requestData, 'cancelamento', apiSettings);

        // Validar resposta da API para cancelamento
        const validation = validateApiResponse('cancelamento', response);
        if (!validation.isValid) {
          console.warn('Valida√ß√£o falhou:', validation.errorMessage);
          await logApiCall(null, 'cancelamento', requestData, response, 'error', validation.errorMessage);

          return new Response(JSON.stringify({
            success: false,
            error: validation.errorMessage,
            response
          }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            status: 400
          });
        }

        await logApiCall(null, 'cancelamento', requestData, response, 'success');

        return new Response(JSON.stringify({
          success: true,
          response
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      } catch (error) {
        await logApiCall(null, 'cancelamento', requestData, null, 'error', error.message);
        throw error;
      }
    }

    // Se chegou aqui, opera√ß√£o n√£o suportada
    throw new Error(`Opera√ß√£o n√£o suportada: ${operation}`);

  } catch (error) {
    console.error('‚ùå === ERRO GERAL NA EDGE FUNCTION ===');
    console.error('üî• Erro:', error.message);
    console.error('üìä Stack:', error.stack);

    // Dar mensagens de erro mais espec√≠ficas dependendo do tipo de erro
    let errorMessage = error.message;
    let statusCode = 500;

    if (error.message.includes('Campos obrigat√≥rios faltando')) {
      statusCode = 400;
      errorMessage = `Erro de valida√ß√£o: ${error.message}`;
    } else if (error.message.includes('CPF do titular √© obrigat√≥rio')) {
      statusCode = 400;
      errorMessage = `Erro de dependente: ${error.message}`;
    } else if (error.message.includes('plano_id √© obrigat√≥rio')) {
      statusCode = 400;
      errorMessage = `Erro de plano: ${error.message}`;
    }

    return new Response(JSON.stringify({
      error: errorMessage,
      details: error.message,
      stack: error.stack
    }), {
      status: statusCode,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});